{"ast":null,"code":"var isObjectLike = require(\"../internal/isObjectLike\");\nvar numberTag = '[object Number]';\nvar objectProto = Object.prototype;\nvar objToString = objectProto.toString;\nfunction isNumber(value) {\n  return typeof value == 'number' || isObjectLike(value) && objToString.call(value) == numberTag;\n}\nmodule.exports = isNumber;","map":{"version":3,"names":["isObjectLike","require","numberTag","objectProto","Object","prototype","objToString","toString","isNumber","value","call","module","exports"],"sources":["C:/Users/PC/Desktop/MedicalApp/my-app/client/node_modules/react-native-credit-card-input-plus/node_modules/lodash/lang/isNumber.js"],"sourcesContent":["var isObjectLike = require('../internal/isObjectLike');\n\n/** `Object#toString` result references. */\nvar numberTag = '[object Number]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n * as numbers, use the `_.isFinite` method.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isNumber(8.4);\n * // => true\n *\n * _.isNumber(NaN);\n * // => true\n *\n * _.isNumber('8.4');\n * // => false\n */\nfunction isNumber(value) {\n  return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);\n}\n\nmodule.exports = isNumber;\n"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,4BAA4B;AAGtD,IAAIC,SAAS,GAAG,iBAAiB;AAGjC,IAAIC,WAAW,GAAGC,MAAM,CAACC,SAAS;AAMlC,IAAIC,WAAW,GAAGH,WAAW,CAACI,QAAQ;AAwBtC,SAASC,QAAQ,CAACC,KAAK,EAAE;EACvB,OAAO,OAAOA,KAAK,IAAI,QAAQ,IAAKT,YAAY,CAACS,KAAK,CAAC,IAAIH,WAAW,CAACI,IAAI,CAACD,KAAK,CAAC,IAAIP,SAAU;AAClG;AAEAS,MAAM,CAACC,OAAO,GAAGJ,QAAQ"},"metadata":{},"sourceType":"script"}