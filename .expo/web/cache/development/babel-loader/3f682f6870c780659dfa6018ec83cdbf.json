{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { initialiseLogger, getLogger } from \"./log\";\nimport { initialiseNativeModule } from \"./native\";\n\nvar ModuleBase = function () {\n  function ModuleBase(app, config, customUrlOrRegion) {\n    _classCallCheck(this, ModuleBase);\n\n    if (!config.moduleName) {\n      throw new Error('Missing module name');\n    }\n\n    if (!config.namespace) {\n      throw new Error('Missing namespace');\n    }\n\n    var moduleName = config.moduleName;\n    this._app = app;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this.namespace = config.namespace;\n    initialiseNativeModule(this, config, customUrlOrRegion);\n    initialiseLogger(this, app.name + \":\" + moduleName.replace('RNFirebase', ''));\n  }\n\n  _createClass(ModuleBase, [{\n    key: \"app\",\n    get: function get() {\n      return this._app;\n    }\n  }, {\n    key: \"log\",\n    get: function get() {\n      return getLogger(this);\n    }\n  }]);\n\n  return ModuleBase;\n}();\n\nexport { ModuleBase as default };","map":{"version":3,"names":["initialiseLogger","getLogger","initialiseNativeModule","ModuleBase","app","config","customUrlOrRegion","moduleName","Error","namespace","_app","_customUrlOrRegion","name","replace"],"sources":["C:/Users/PC/Desktop/All/StoreApp2/my-app/node_modules/react-native-firebase/dist/utils/ModuleBase.js"],"sourcesContent":["import { initialiseLogger, getLogger } from './log';\nimport { initialiseNativeModule } from './native';\nexport default class ModuleBase {\n  /**\n   *\n   * @param app\n   * @param config\n   * @param customUrlOrRegion\n   */\n  constructor(app, config, customUrlOrRegion) {\n    if (!config.moduleName) {\n      throw new Error('Missing module name');\n    }\n\n    if (!config.namespace) {\n      throw new Error('Missing namespace');\n    }\n\n    const {\n      moduleName\n    } = config;\n    this._app = app;\n    this._customUrlOrRegion = customUrlOrRegion;\n    this.namespace = config.namespace; // check if native module exists as all native\n\n    initialiseNativeModule(this, config, customUrlOrRegion);\n    initialiseLogger(this, `${app.name}:${moduleName.replace('RNFirebase', '')}`);\n  }\n  /**\n   * Returns the App instance for current module\n   * @return {*}\n   */\n\n\n  get app() {\n    return this._app;\n  }\n\n  get log() {\n    return getLogger(this);\n  }\n\n}"],"mappings":";;AAAA,SAASA,gBAAT,EAA2BC,SAA3B;AACA,SAASC,sBAAT;;IACqBC,U;EAOnB,oBAAYC,GAAZ,EAAiBC,MAAjB,EAAyBC,iBAAzB,EAA4C;IAAA;;IAC1C,IAAI,CAACD,MAAM,CAACE,UAAZ,EAAwB;MACtB,MAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;IACD;;IAED,IAAI,CAACH,MAAM,CAACI,SAAZ,EAAuB;MACrB,MAAM,IAAID,KAAJ,CAAU,mBAAV,CAAN;IACD;;IAED,IACED,UADF,GAEIF,MAFJ,CACEE,UADF;IAGA,KAAKG,IAAL,GAAYN,GAAZ;IACA,KAAKO,kBAAL,GAA0BL,iBAA1B;IACA,KAAKG,SAAL,GAAiBJ,MAAM,CAACI,SAAxB;IAEAP,sBAAsB,CAAC,IAAD,EAAOG,MAAP,EAAeC,iBAAf,CAAtB;IACAN,gBAAgB,CAAC,IAAD,EAAUI,GAAG,CAACQ,IAAd,SAAsBL,UAAU,CAACM,OAAX,CAAmB,YAAnB,EAAiC,EAAjC,CAAtB,CAAhB;EACD;;;;SAOD,eAAU;MACR,OAAO,KAAKH,IAAZ;IACD;;;SAED,eAAU;MACR,OAAOT,SAAS,CAAC,IAAD,CAAhB;IACD;;;;;;SAtCkBE,U"},"metadata":{},"sourceType":"module"}