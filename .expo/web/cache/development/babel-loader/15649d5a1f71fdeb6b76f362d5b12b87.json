{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AndroidChannel from \"./AndroidChannel\";\nimport AndroidChannelGroup from \"./AndroidChannelGroup\";\nimport { getNativeModule } from \"../../utils/native\";\n\nvar AndroidNotifications = function () {\n  function AndroidNotifications(notifications) {\n    _classCallCheck(this, AndroidNotifications);\n\n    this._notifications = notifications;\n  }\n\n  _createClass(AndroidNotifications, [{\n    key: \"createChannel\",\n    value: function createChannel(channel) {\n      if (Platform.OS === 'android') {\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(\"AndroidNotifications:createChannel expects an 'AndroidChannel' but got type \" + typeof channel);\n        }\n\n        return getNativeModule(this._notifications).createChannel(channel.build());\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannelGroup\",\n    value: function createChannelGroup(channelGroup) {\n      if (Platform.OS === 'android') {\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(\"AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type \" + typeof channelGroup);\n        }\n\n        return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannelGroups\",\n    value: function createChannelGroups(channelGroups) {\n      if (Platform.OS === 'android') {\n        if (!Array.isArray(channelGroups)) {\n          throw new Error(\"AndroidNotifications:createChannelGroups expects an 'Array' but got type \" + typeof channelGroups);\n        }\n\n        var nativeChannelGroups = [];\n\n        for (var i = 0; i < channelGroups.length; i++) {\n          var channelGroup = channelGroups[i];\n\n          if (!(channelGroup instanceof AndroidChannelGroup)) {\n            throw new Error(\"AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type \" + typeof channelGroup);\n          }\n\n          nativeChannelGroups.push(channelGroup.build());\n        }\n\n        return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannels\",\n    value: function createChannels(channels) {\n      if (Platform.OS === 'android') {\n        if (!Array.isArray(channels)) {\n          throw new Error(\"AndroidNotifications:createChannels expects an 'Array' but got type \" + typeof channels);\n        }\n\n        var nativeChannels = [];\n\n        for (var i = 0; i < channels.length; i++) {\n          var channel = channels[i];\n\n          if (!(channel instanceof AndroidChannel)) {\n            throw new Error(\"AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type \" + typeof channel);\n          }\n\n          nativeChannels.push(channel.build());\n        }\n\n        return getNativeModule(this._notifications).createChannels(nativeChannels);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"removeDeliveredNotificationsByTag\",\n    value: function removeDeliveredNotificationsByTag(tag) {\n      if (Platform.OS === 'android') {\n        if (typeof tag !== 'string') {\n          throw new Error(\"AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type \" + typeof tag);\n        }\n\n        return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"deleteChannelGroup\",\n    value: function deleteChannelGroup(groupId) {\n      if (Platform.OS === 'android') {\n        if (typeof groupId !== 'string') {\n          throw new Error(\"AndroidNotifications:deleteChannelGroup expects an 'string' but got type \" + typeof groupId);\n        }\n\n        return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"deleteChannel\",\n    value: function deleteChannel(channelId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelId !== 'string') {\n          throw new Error(\"AndroidNotifications:deleteChannel expects an 'string' but got type \" + typeof channelId);\n        }\n\n        return getNativeModule(this._notifications).deleteChannel(channelId);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"getChannel\",\n    value: function getChannel(channelId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelId !== 'string') {\n          throw new Error(\"AndroidNotifications:getChannel expects an 'string' but got type \" + typeof channelId);\n        }\n\n        return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n      }\n\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(getNativeModule(this._notifications).getChannels());\n      }\n\n      return Promise.resolve([]);\n    }\n  }, {\n    key: \"getChannelGroup\",\n    value: function getChannelGroup(channelGroupId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelGroupId !== 'string') {\n          throw new Error(\"AndroidNotifications:getChannel expects an 'string' but got type \" + typeof channelGroupId);\n        }\n\n        return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n      }\n\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"getChannelGroups\",\n    value: function getChannelGroups() {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n      }\n\n      return Promise.resolve([]);\n    }\n  }]);\n\n  return AndroidNotifications;\n}();\n\nexport { AndroidNotifications as default };","map":{"version":3,"names":["AndroidChannel","AndroidChannelGroup","getNativeModule","AndroidNotifications","notifications","_notifications","channel","Platform","OS","Error","createChannel","build","Promise","resolve","channelGroup","createChannelGroup","channelGroups","Array","isArray","nativeChannelGroups","i","length","push","createChannelGroups","channels","nativeChannels","createChannels","tag","removeDeliveredNotificationsByTag","groupId","deleteChannelGroup","channelId","deleteChannel","getChannel","getChannels","channelGroupId","getChannelGroup","getChannelGroups"],"sources":["C:/Users/PC/Desktop/All/StoreApp2/my-app/node_modules/react-native-firebase/dist/modules/notifications/AndroidNotifications.js"],"sourcesContent":["/**\n * \n * AndroidNotifications representation wrapper\n */\nimport { Platform } from 'react-native';\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\nimport { getNativeModule } from '../../utils/native';\nexport default class AndroidNotifications {\n  constructor(notifications) {\n    this._notifications = notifications;\n  }\n\n  createChannel(channel) {\n    if (Platform.OS === 'android') {\n      if (!(channel instanceof AndroidChannel)) {\n        throw new Error(`AndroidNotifications:createChannel expects an 'AndroidChannel' but got type ${typeof channel}`);\n      }\n\n      return getNativeModule(this._notifications).createChannel(channel.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroup(channelGroup) {\n    if (Platform.OS === 'android') {\n      if (!(channelGroup instanceof AndroidChannelGroup)) {\n        throw new Error(`AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n      }\n\n      return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroups(channelGroups) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channelGroups)) {\n        throw new Error(`AndroidNotifications:createChannelGroups expects an 'Array' but got type ${typeof channelGroups}`);\n      }\n\n      const nativeChannelGroups = [];\n\n      for (let i = 0; i < channelGroups.length; i++) {\n        const channelGroup = channelGroups[i];\n\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(`AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n        }\n\n        nativeChannelGroups.push(channelGroup.build());\n      }\n\n      return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannels(channels) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channels)) {\n        throw new Error(`AndroidNotifications:createChannels expects an 'Array' but got type ${typeof channels}`);\n      }\n\n      const nativeChannels = [];\n\n      for (let i = 0; i < channels.length; i++) {\n        const channel = channels[i];\n\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(`AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type ${typeof channel}`);\n        }\n\n        nativeChannels.push(channel.build());\n      }\n\n      return getNativeModule(this._notifications).createChannels(nativeChannels);\n    }\n\n    return Promise.resolve();\n  }\n\n  removeDeliveredNotificationsByTag(tag) {\n    if (Platform.OS === 'android') {\n      if (typeof tag !== 'string') {\n        throw new Error(`AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type ${typeof tag}`);\n      }\n\n      return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannelGroup(groupId) {\n    if (Platform.OS === 'android') {\n      if (typeof groupId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannelGroup expects an 'string' but got type ${typeof groupId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannel(channelId);\n    }\n\n    return Promise.resolve();\n  }\n\n  getChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannels() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannels());\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getChannelGroup(channelGroupId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelGroupId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelGroupId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannelGroups() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n    }\n\n    return Promise.resolve([]);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}