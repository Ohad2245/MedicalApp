{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nexport var MODULE_NAME = 'RNFirebaseCrashlytics';\nexport var NAMESPACE = 'crashlytics';\n\nvar Crashlytics = function (_ModuleBase) {\n  _inherits(Crashlytics, _ModuleBase);\n\n  var _super = _createSuper(Crashlytics);\n\n  function Crashlytics(app) {\n    _classCallCheck(this, Crashlytics);\n\n    return _super.call(this, app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  _createClass(Crashlytics, [{\n    key: \"crash\",\n    value: function crash() {\n      getNativeModule(this).crash();\n    }\n  }, {\n    key: \"log\",\n    value: function log(message) {\n      if (typeof message === 'string') {\n        getNativeModule(this).log(message);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"recordError\",\n    value: function recordError(code, message) {\n      if (typeof code === 'number' && typeof message === 'string') {\n        getNativeModule(this).recordError(code, message);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"recordCustomError\",\n    value: function recordCustomError(name, message, stack) {\n      if (typeof stack === 'undefined') {\n        if (typeof name === 'string' && typeof message === 'string') {\n          getNativeModule(this).recordCustomError(name, message, []);\n        } else {\n          throw new Error('Invalid parameter type!');\n        }\n      } else if (typeof name === 'string' && typeof message === 'string' && Array.isArray(stack)) {\n        var hasKey = true;\n        stack.forEach(function (v) {\n          if (!Object.prototype.hasOwnProperty.call(v, 'fileName')) {\n            hasKey = false;\n          }\n        });\n\n        if (hasKey) {\n          getNativeModule(this).recordCustomError(name, message, stack);\n        } else {\n          throw new Error('Missing required argument fileName!');\n        }\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setBoolValue\",\n    value: function setBoolValue(key, value) {\n      if (typeof key === 'string' && typeof value === 'boolean') {\n        getNativeModule(this).setBoolValue(key, value);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setFloatValue\",\n    value: function setFloatValue(key, value) {\n      if (typeof key === 'string' && typeof value === 'number') {\n        getNativeModule(this).setFloatValue(key, value);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setIntValue\",\n    value: function setIntValue(key, value) {\n      if (typeof key === 'string' && typeof value === 'number') {\n        getNativeModule(this).setIntValue(key, value);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setStringValue\",\n    value: function setStringValue(key, value) {\n      if (typeof key === 'string' && typeof value === 'string') {\n        getNativeModule(this).setStringValue(key, value);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setUserIdentifier\",\n    value: function setUserIdentifier(userId) {\n      if (typeof userId === 'string') {\n        getNativeModule(this).setUserIdentifier(userId);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setUserName\",\n    value: function setUserName(userName) {\n      if (typeof userName === 'string') {\n        return getNativeModule(this).setUserName(userName);\n      }\n\n      throw new Error('Invalid parameter type!');\n    }\n  }, {\n    key: \"setUserEmail\",\n    value: function setUserEmail(userEmail) {\n      if (typeof userEmail === 'string') {\n        getNativeModule(this).setUserEmail(userEmail);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"enableCrashlyticsCollection\",\n    value: function enableCrashlyticsCollection() {\n      getNativeModule(this).enableCrashlyticsCollection();\n    }\n  }]);\n\n  return Crashlytics;\n}(ModuleBase);\n\nexport { Crashlytics as default };\nexport var statics = {};","map":{"version":3,"names":["ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","Crashlytics","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","crash","message","log","Error","code","recordError","name","stack","recordCustomError","Array","isArray","hasKey","forEach","v","Object","prototype","hasOwnProperty","call","key","value","setBoolValue","setFloatValue","setIntValue","setStringValue","userId","setUserIdentifier","userName","setUserName","userEmail","setUserEmail","enableCrashlyticsCollection","statics"],"sources":["C:/Users/PC/Desktop/All/StoreApp2/my-app/node_modules/react-native-firebase/dist/modules/crashlytics/index.js"],"sourcesContent":["/**\n * \n * Crash Reporting representation wrapper\n */\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebaseCrashlytics';\nexport const NAMESPACE = 'crashlytics';\nexport default class Crashlytics extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Forces a crash. Useful for testing your application is set up correctly.\n   */\n\n\n  crash() {\n    getNativeModule(this).crash();\n  }\n  /**\n   * Logs a message that will appear in any subsequent crash reports.\n   * @param {string} message\n   */\n\n\n  log(message) {\n    if (typeof message === 'string') {\n      getNativeModule(this).log(message);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Logs a non fatal exception.\n   * @param {number} code\n   * @param {string} message\n   */\n\n\n  recordError(code, message) {\n    if (typeof code === 'number' && typeof message === 'string') {\n      getNativeModule(this).recordError(code, message);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Logs a custom non fatal exception.\n   * @param {string} name\n   * @param {string} message\n   * @param {Object[]} stack Optional\n   */\n\n\n  recordCustomError(name, message, stack) {\n    if (typeof stack === 'undefined') {\n      if (typeof name === 'string' && typeof message === 'string') {\n        getNativeModule(this).recordCustomError(name, message, []);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    } else if (typeof name === 'string' && typeof message === 'string' && Array.isArray(stack)) {\n      let hasKey = true;\n      stack.forEach(v => {\n        if (!Object.prototype.hasOwnProperty.call(v, 'fileName')) {\n          hasKey = false;\n        }\n      });\n\n      if (hasKey) {\n        getNativeModule(this).recordCustomError(name, message, stack);\n      } else {\n        throw new Error('Missing required argument fileName!');\n      }\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a boolean value to show alongside any subsequent crash reports.\n   */\n\n\n  setBoolValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'boolean') {\n      getNativeModule(this).setBoolValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a float value to show alongside any subsequent crash reports.\n   */\n\n\n  setFloatValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'number') {\n      getNativeModule(this).setFloatValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set an integer value to show alongside any subsequent crash reports.\n   */\n\n\n  setIntValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'number') {\n      getNativeModule(this).setIntValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a string value to show alongside any subsequent crash reports.\n   */\n\n\n  setStringValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'string') {\n      getNativeModule(this).setStringValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set the user ID to show alongside any subsequent crash reports.\n   */\n\n\n  setUserIdentifier(userId) {\n    if (typeof userId === 'string') {\n      getNativeModule(this).setUserIdentifier(userId);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set the user name to show alongside any subsequent crash reports.\n   */\n\n\n  setUserName(userName) {\n    if (typeof userName === 'string') {\n      return getNativeModule(this).setUserName(userName);\n    }\n\n    throw new Error('Invalid parameter type!');\n  }\n  /**\n   * Set the user email to show alongside any subsequent crash reports.\n   */\n\n\n  setUserEmail(userEmail) {\n    if (typeof userEmail === 'string') {\n      getNativeModule(this).setUserEmail(userEmail);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Enable Crashlytics reporting. Only avaliable when disabled automatic initialization\n   */\n\n\n  enableCrashlyticsCollection() {\n    getNativeModule(this).enableCrashlyticsCollection();\n  }\n\n}\nexport const statics = {};"],"mappings":"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"},"metadata":{},"sourceType":"module"}