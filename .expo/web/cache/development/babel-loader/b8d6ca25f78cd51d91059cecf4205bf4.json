{"ast":null,"code":"var identity = require(\"../utility/identity\");\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1:\n      return function (value) {\n        return func.call(thisArg, value);\n      };\n    case 3:\n      return function (value, index, collection) {\n        return func.call(thisArg, value, index, collection);\n      };\n    case 4:\n      return function (accumulator, value, index, collection) {\n        return func.call(thisArg, accumulator, value, index, collection);\n      };\n    case 5:\n      return function (value, other, key, object, source) {\n        return func.call(thisArg, value, other, key, object, source);\n      };\n  }\n  return function () {\n    return func.apply(thisArg, arguments);\n  };\n}\nmodule.exports = bindCallback;","map":{"version":3,"names":["identity","require","bindCallback","func","thisArg","argCount","undefined","value","call","index","collection","accumulator","other","key","object","source","apply","arguments","module","exports"],"sources":["C:/Users/PC/Desktop/MedicalApp/my-app/client/node_modules/react-native-credit-card-input-plus/node_modules/lodash/internal/bindCallback.js"],"sourcesContent":["var identity = require('../utility/identity');\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1: return function(value) {\n      return func.call(thisArg, value);\n    };\n    case 3: return function(value, index, collection) {\n      return func.call(thisArg, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(thisArg, accumulator, value, index, collection);\n    };\n    case 5: return function(value, other, key, object, source) {\n      return func.call(thisArg, value, other, key, object, source);\n    };\n  }\n  return function() {\n    return func.apply(thisArg, arguments);\n  };\n}\n\nmodule.exports = bindCallback;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,uBAAuB;AAY7C,SAASC,YAAY,CAACC,IAAI,EAAEC,OAAO,EAAEC,QAAQ,EAAE;EAC7C,IAAI,OAAOF,IAAI,IAAI,UAAU,EAAE;IAC7B,OAAOH,QAAQ;EACjB;EACA,IAAII,OAAO,KAAKE,SAAS,EAAE;IACzB,OAAOH,IAAI;EACb;EACA,QAAQE,QAAQ;IACd,KAAK,CAAC;MAAE,OAAO,UAASE,KAAK,EAAE;QAC7B,OAAOJ,IAAI,CAACK,IAAI,CAACJ,OAAO,EAAEG,KAAK,CAAC;MAClC,CAAC;IACD,KAAK,CAAC;MAAE,OAAO,UAASA,KAAK,EAAEE,KAAK,EAAEC,UAAU,EAAE;QAChD,OAAOP,IAAI,CAACK,IAAI,CAACJ,OAAO,EAAEG,KAAK,EAAEE,KAAK,EAAEC,UAAU,CAAC;MACrD,CAAC;IACD,KAAK,CAAC;MAAE,OAAO,UAASC,WAAW,EAAEJ,KAAK,EAAEE,KAAK,EAAEC,UAAU,EAAE;QAC7D,OAAOP,IAAI,CAACK,IAAI,CAACJ,OAAO,EAAEO,WAAW,EAAEJ,KAAK,EAAEE,KAAK,EAAEC,UAAU,CAAC;MAClE,CAAC;IACD,KAAK,CAAC;MAAE,OAAO,UAASH,KAAK,EAAEK,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,EAAE;QACzD,OAAOZ,IAAI,CAACK,IAAI,CAACJ,OAAO,EAAEG,KAAK,EAAEK,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,CAAC;MAC9D,CAAC;EAAC;EAEJ,OAAO,YAAW;IAChB,OAAOZ,IAAI,CAACa,KAAK,CAACZ,OAAO,EAAEa,SAAS,CAAC;EACvC,CAAC;AACH;AAEAC,MAAM,CAACC,OAAO,GAAGjB,YAAY"},"metadata":{},"sourceType":"script"}