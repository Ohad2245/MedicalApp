{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport ReactNativeAN from 'react-native-alarm-notification';\nvar fireDate = ReactNativeAN.parseDate(new Date(Date.now() + 1000));\nvar alarmNotifData = {\n  title: \"My Notification Title\",\n  message: \"My Notification Message\",\n  channel: \"my_channel_id\",\n  small_icon: \"ic_launcher\",\n  data: {\n    foo: \"bar\"\n  }\n};\nvar Test = {\n  method: function method() {\n    return function _callee() {\n      var alarm, alarms;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(ReactNativeAN.scheduleAlarm(_objectSpread(_objectSpread({}, alarmNotifData), {}, {\n                fire_date: fireDate\n              })));\n\n            case 2:\n              alarm = _context.sent;\n              console.log(alarm);\n              ReactNativeAN.deleteAlarm(alarm.id);\n              ReactNativeAN.deleteRepeatingAlarm(alarm.id);\n              ReactNativeAN.stopAlarmSound();\n              ReactNativeAN.sendNotification(alarmNotifData);\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(ReactNativeAN.getScheduledAlarms());\n\n            case 10:\n              alarms = _context.sent;\n              ReactNativeAN.removeFiredNotification(alarm.id);\n              ReactNativeAN.removeAllFiredNotifications();\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"names":["ReactNativeAN","fireDate","parseDate","Date","now","alarmNotifData","title","message","channel","small_icon","data","foo","Test","method","scheduleAlarm","fire_date","alarm","console","log","deleteAlarm","id","deleteRepeatingAlarm","stopAlarmSound","sendNotification","getScheduledAlarms","alarms","removeFiredNotification","removeAllFiredNotifications"],"sources":["C:/Users/PC/Desktop/All/MedicalApp/my-app/client/components/Authentication/alarm/Test.js"],"sourcesContent":["import ReactNativeAN from 'react-native-alarm-notification';\r\n\r\nconst fireDate = ReactNativeAN.parseDate(new Date(Date.now() + 1000));     // set the fire date for 1 second from now\r\n\r\nconst alarmNotifData = {\r\n\ttitle: \"My Notification Title\",\r\n\tmessage: \"My Notification Message\",\r\n\tchannel: \"my_channel_id\",\r\n\tsmall_icon: \"ic_launcher\",\r\n\r\n\t// You can add any additional data that is important for the notification\r\n\t// It will be added to the PendingIntent along with the rest of the bundle.\r\n\t// e.g.\r\n  \tdata: { foo: \"bar\" },\r\n};\r\n\r\nconst Test = {\r\n\t\r\n    async method(){\r\n        //Schedule Future Alarm\r\n        const alarm = await ReactNativeAN.scheduleAlarm({ ...alarmNotifData, fire_date: fireDate });\r\n        console.log(alarm); // { id: 1 }\r\n\r\n        //Delete Scheduled Alarm\r\n        ReactNativeAN.deleteAlarm(alarm.id);\r\n\r\n        //Delete Repeating Alarm\r\n        ReactNativeAN.deleteRepeatingAlarm(alarm.id);\r\n\r\n        //Stop Alarm\r\n        ReactNativeAN.stopAlarmSound();\r\n\r\n        //Send Local Notification Now\r\n        ReactNativeAN.sendNotification(alarmNotifData);\r\n\r\n        //Get All Scheduled Alarms\r\n        const alarms = await ReactNativeAN.getScheduledAlarms();\r\n\r\n        //Clear Notification(s) From Notification Center/Tray\r\n        ReactNativeAN.removeFiredNotification(alarm.id);\r\n        ReactNativeAN.removeAllFiredNotifications();\r\n    }\r\n\r\n}\r\n"],"mappings":";;;;;;;AAAA,OAAOA,aAAP,MAA0B,iCAA1B;AAEA,IAAMC,QAAQ,GAAGD,aAAa,CAACE,SAAd,CAAwB,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,IAAtB,CAAxB,CAAjB;AAEA,IAAMC,cAAc,GAAG;EACtBC,KAAK,EAAE,uBADe;EAEtBC,OAAO,EAAE,yBAFa;EAGtBC,OAAO,EAAE,eAHa;EAItBC,UAAU,EAAE,aAJU;EASpBC,IAAI,EAAE;IAAEC,GAAG,EAAE;EAAP;AATc,CAAvB;AAYA,IAAMC,IAAI,GAAG;EAEHC,MAFG,oBAEK;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCAEUb,aAAa,CAACc,aAAd,iCAAiCT,cAAjC;gBAAiDU,SAAS,EAAEd;cAA5D,GAFV;;YAAA;cAEJe,KAFI;cAGVC,OAAO,CAACC,GAAR,CAAYF,KAAZ;cAGAhB,aAAa,CAACmB,WAAd,CAA0BH,KAAK,CAACI,EAAhC;cAGApB,aAAa,CAACqB,oBAAd,CAAmCL,KAAK,CAACI,EAAzC;cAGApB,aAAa,CAACsB,cAAd;cAGAtB,aAAa,CAACuB,gBAAd,CAA+BlB,cAA/B;cAfU;cAAA,iCAkBWL,aAAa,CAACwB,kBAAd,EAlBX;;YAAA;cAkBJC,MAlBI;cAqBVzB,aAAa,CAAC0B,uBAAd,CAAsCV,KAAK,CAACI,EAA5C;cACApB,aAAa,CAAC2B,2BAAd;;YAtBU;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAuBb;AAzBQ,CAAb"},"metadata":{},"sourceType":"module"}