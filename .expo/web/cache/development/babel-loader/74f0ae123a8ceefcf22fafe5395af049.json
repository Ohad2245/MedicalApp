{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar Timestamp = function () {\n  function Timestamp(seconds, nanoseconds) {\n    _classCallCheck(this, Timestamp);\n\n    if (nanoseconds < 0) {\n      throw new Error(\"Timestamp nanoseconds out of range: \" + nanoseconds);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(\"Timestamp nanoseconds out of range: \" + nanoseconds);\n    }\n\n    if (seconds < -62135596800) {\n      throw new Error(\"Timestamp seconds out of range: \" + seconds);\n    }\n\n    if (seconds >= 253402300800) {\n      throw new Error(\"Timestamp seconds out of range: \" + seconds);\n    }\n\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n  }\n\n  _createClass(Timestamp, [{\n    key: \"toDate\",\n    value: function toDate() {\n      return new Date(this.toMillis());\n    }\n  }, {\n    key: \"toMillis\",\n    value: function toMillis() {\n      return this.seconds * 1000 + this.nanoseconds / 1e6;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n  }], [{\n    key: \"now\",\n    value: function now() {\n      return Timestamp.fromMillis(Date.now());\n    }\n  }, {\n    key: \"fromDate\",\n    value: function fromDate(date) {\n      return Timestamp.fromMillis(date.getTime());\n    }\n  }, {\n    key: \"fromMillis\",\n    value: function fromMillis(milliseconds) {\n      var seconds = Math.floor(milliseconds / 1000);\n      var nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n      return new Timestamp(seconds, nanoseconds);\n    }\n  }]);\n\n  return Timestamp;\n}();\n\nexport { Timestamp as default };","map":{"version":3,"names":["Timestamp","seconds","nanoseconds","Error","Date","toMillis","other","fromMillis","now","date","getTime","milliseconds","Math","floor"],"sources":["C:/Users/PC/Desktop/All/StoreApp2/my-app/node_modules/react-native-firebase/dist/modules/firestore/Timestamp.js"],"sourcesContent":["/**\n * \n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * ----\n *\n * Some snippets taken from: https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/api/timestamp.ts\n * and adapted to work for React Native Firebase\n */\n\n/**\n * Timestamp representation wrapper\n */\nexport default class Timestamp {\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    return Timestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new Timestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (nanoseconds < 0) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`Timestamp nanoseconds out of range: ${nanoseconds}`);\n    } // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n\n\n    if (seconds < -62135596800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    } // This will break in the year 10,000.\n\n\n    if (seconds >= 253402300800) {\n      throw new Error(`Timestamp seconds out of range: ${seconds}`);\n    }\n\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this.seconds * 1000 + this.nanoseconds / 1e6;\n  }\n\n  isEqual(other) {\n    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n  }\n\n  toString() {\n    return `Timestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n\n}"],"mappings":";;;IAyBqBA,S;EAenB,mBAAYC,OAAZ,EAAqBC,WAArB,EAAkC;IAAA;;IAChC,IAAIA,WAAW,GAAG,CAAlB,EAAqB;MACnB,MAAM,IAAIC,KAAJ,0CAAiDD,WAAjD,CAAN;IACD;;IAED,IAAIA,WAAW,IAAI,GAAnB,EAAwB;MACtB,MAAM,IAAIC,KAAJ,0CAAiDD,WAAjD,CAAN;IACD;;IAGD,IAAID,OAAO,GAAG,CAAC,WAAf,EAA4B;MAC1B,MAAM,IAAIE,KAAJ,sCAA6CF,OAA7C,CAAN;IACD;;IAGD,IAAIA,OAAO,IAAI,YAAf,EAA6B;MAC3B,MAAM,IAAIE,KAAJ,sCAA6CF,OAA7C,CAAN;IACD;;IAED,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKC,WAAL,GAAmBA,WAAnB;EACD;;;;WAED,kBAAS;MACP,OAAO,IAAIE,IAAJ,CAAS,KAAKC,QAAL,EAAT,CAAP;IACD;;;WAED,oBAAW;MACT,OAAO,KAAKJ,OAAL,GAAe,IAAf,GAAsB,KAAKC,WAAL,GAAmB,GAAhD;IACD;;;WAED,iBAAQI,KAAR,EAAe;MACb,OAAOA,KAAK,CAACL,OAAN,KAAkB,KAAKA,OAAvB,IAAkCK,KAAK,CAACJ,WAAN,KAAsB,KAAKA,WAApE;IACD;;;WAED,oBAAW;MACT,8BAA4B,KAAKD,OAAjC,sBAAyD,KAAKC,WAA9D;IACD;;;WAnDD,eAAa;MACX,OAAOF,SAAS,CAACO,UAAV,CAAqBH,IAAI,CAACI,GAAL,EAArB,CAAP;IACD;;;WAED,kBAAgBC,IAAhB,EAAsB;MACpB,OAAOT,SAAS,CAACO,UAAV,CAAqBE,IAAI,CAACC,OAAL,EAArB,CAAP;IACD;;;WAED,oBAAkBC,YAAlB,EAAgC;MAC9B,IAAMV,OAAO,GAAGW,IAAI,CAACC,KAAL,CAAWF,YAAY,GAAG,IAA1B,CAAhB;MACA,IAAMT,WAAW,GAAG,CAACS,YAAY,GAAGV,OAAO,GAAG,IAA1B,IAAkC,GAAtD;MACA,OAAO,IAAID,SAAJ,CAAcC,OAAd,EAAuBC,WAAvB,CAAP;IACD;;;;;;SAbkBF,S"},"metadata":{},"sourceType":"module"}