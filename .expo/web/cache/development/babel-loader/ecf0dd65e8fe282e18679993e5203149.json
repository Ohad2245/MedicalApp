{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"name\", \"maskProps\", \"refInput\", \"onChange\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport { TextInputMask } from 'react-native-masked-text';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nvar CardInput = function CardInput(_ref) {\n  var name = _ref.name,\n    maskProps = _ref.maskProps,\n    _refInput = _ref.refInput,\n    _ref$onChange = _ref.onChange,\n    onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n    style = _ref.style,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var handleChange = React.useCallback(function (text) {\n    var value = text.toUpperCase();\n    return onChange(name, value);\n  }, [name, onChange]);\n  var setRef = function setRef(inputRef, ref) {\n    if (typeof ref === 'object') {\n      ref.current = inputRef;\n    }\n  };\n  var InputComponent = maskProps ? TextInputMask : TextInput;\n  var customProps = maskProps ? {\n    refInput: function refInput(ref) {\n      return setRef(ref, _refInput);\n    }\n  } : {\n    ref: _refInput\n  };\n  return React.createElement(InputComponent, _extends({\n    style: style,\n    onChangeText: handleChange,\n    hitSlop: {\n      top: 10,\n      bottom: 10,\n      left: 0,\n      right: 0\n    }\n  }, maskProps, props, customProps));\n};\nexport default CardInput;","map":{"version":3,"sources":["CardInput.tsx"],"names":["React","TextInputMask","CardInput","name","maskProps","refInput","onChange","style","props","handleChange","useCallback","text","value","toUpperCase","setRef","inputRef","ref","current","InputComponent","TextInput","customProps","top","bottom","left","right"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAAkD,0BAAlD;AAAA;AAWA,IAAMC,SAAc,GAAG,SAAjBA,SAAc,OAOE;EAAA,IANpBC,IADsB,QACtBA,IADsB;IAEtBC,SAFsB,QAEtBA,SAFsB;IAGtBC,SAHsB,QAGtBA,QAHsB;IAAA,qBAItBC,QAAQ;IAARA,QAAQ,8BAAG,YAAM,CAAE,CAJG;IAKtBC,KALsB,QAKtBA,KALsB;IAMnBC,KAAAA;EAEH,IAAMC,YAAY,GAAG,KAAK,CAACC,WAAN,CAClBC,UAAAA,IAAD,EAAU;IACR,IAAMC,KAAK,GAAGD,IAAI,CAACE,WAALF,EAAd;IACA,OAAOL,QAAQ,CAACH,IAAD,EAAOS,KAAP,CAAf;EACD,CAJkB,EAKnB,CAACT,IAAD,EAAOG,QAAP,CALmB,CAArB;EAQA,IAAMQ,MAAM,GAAG,SAATA,MAAM,CAAIC,QAAD,EAAgBC,GAAhB,EAA6B;IAC1C,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;MAC3BA,GAAG,CAACC,OAAJD,GAAcD,QAAdC;IACD;EACF,CAJD;EAMA,IAAME,cAAmB,GAAGd,SAAS,GAAGH,aAAH,GAAmBkB,SAAxD;EACA,IAAMC,WAAW,GAAGhB,SAAS,GACzB;IAAEC,QAAQ,EAAGW,kBAAAA,GAAD;MAAA,OAAcF,MAAM,CAACE,GAAD,EAAMX,SAAN,CAAA;IAAA;EAAhC,CADyB,GAEzB;IAAEW,GAAG,EAAEX;EAAP,CAFJ;EAIA,OACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAA,QAAA,CAAA;IACE,KAAK,EAAEE,KADT;IAEE,YAAY,EAAEE,YAFhB;IAGE,OAAO,EAAE;MAAEY,GAAG,EAAE,EAAP;MAAWC,MAAM,EAAE,EAAnB;MAAuBC,IAAI,EAAE,CAA7B;MAAgCC,KAAK,EAAE;IAAvC;EAHX,CAAA,EAIMpB,SAJN,EAKMI,KALN,EAMMY,WANN,CAAA,CADF;AAUD,CArCD;AAuCA,eAAelB,SAAf","sourcesContent":["import React from 'react';\nimport { TextInputMask, TextInputMaskProps } from 'react-native-masked-text';\nimport { TextInputProps, TextInput } from 'react-native';\n\nexport type CardInputProps = {\n  name: string;\n  onChange: (name: string, text: string) => void | null;\n  maskProps: TextInputMaskProps;\n  placeholderTextColor: string;\n  refInput: React.MutableRefObject<any>;\n} & TextInputProps;\n\nconst CardInput: any = ({\n  name,\n  maskProps,\n  refInput,\n  onChange = () => {},\n  style,\n  ...props\n}: CardInputProps) => {\n  const handleChange = React.useCallback(\n    (text) => {\n      const value = text.toUpperCase();\n      return onChange(name, value);\n    },\n    [name, onChange]\n  );\n\n  const setRef = (inputRef: any, ref: any) => {\n    if (typeof ref === 'object') {\n      ref.current = inputRef;\n    }\n  };\n\n  const InputComponent: any = maskProps ? TextInputMask : TextInput;\n  const customProps = maskProps\n    ? { refInput: (ref: any) => setRef(ref, refInput) }\n    : { ref: refInput };\n\n  return (\n    <InputComponent\n      style={style}\n      onChangeText={handleChange}\n      hitSlop={{ top: 10, bottom: 10, left: 0, right: 0 }}\n      {...maskProps}\n      {...props}\n      {...customProps}\n    />\n  );\n};\n\nexport default CardInput;\n"]},"metadata":{},"sourceType":"module"}