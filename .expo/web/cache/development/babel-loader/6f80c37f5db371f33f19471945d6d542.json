{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar linkProviderId = 'emailLink';\nvar passwordProviderId = 'password';\n\nvar EmailAuthProvider = function () {\n  function EmailAuthProvider() {\n    _classCallCheck(this, EmailAuthProvider);\n\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n\n  _createClass(EmailAuthProvider, null, [{\n    key: \"EMAIL_LINK_SIGN_IN_METHOD\",\n    get: function get() {\n      return linkProviderId;\n    }\n  }, {\n    key: \"EMAIL_PASSWORD_SIGN_IN_METHOD\",\n    get: function get() {\n      return passwordProviderId;\n    }\n  }, {\n    key: \"PROVIDER_ID\",\n    get: function get() {\n      return passwordProviderId;\n    }\n  }, {\n    key: \"credential\",\n    value: function credential(email, password) {\n      return {\n        token: email,\n        secret: password,\n        providerId: passwordProviderId\n      };\n    }\n  }, {\n    key: \"credentialWithLink\",\n    value: function credentialWithLink(email, emailLink) {\n      return {\n        token: email,\n        secret: emailLink,\n        providerId: linkProviderId\n      };\n    }\n  }]);\n\n  return EmailAuthProvider;\n}();\n\nexport { EmailAuthProvider as default };","map":{"version":3,"names":["linkProviderId","passwordProviderId","EmailAuthProvider","Error","email","password","token","secret","providerId","emailLink"],"sources":["C:/Users/PC/Desktop/All/StoreApp2/my-app/node_modules/react-native-firebase/dist/modules/auth/providers/EmailAuthProvider.js"],"sourcesContent":["/**\n * \n * EmailAuthProvider representation wrapper\n */\nconst linkProviderId = 'emailLink';\nconst passwordProviderId = 'password';\nexport default class EmailAuthProvider {\n  constructor() {\n    throw new Error('`new EmailAuthProvider()` is not supported on the native Firebase SDKs.');\n  }\n\n  static get EMAIL_LINK_SIGN_IN_METHOD() {\n    return linkProviderId;\n  }\n\n  static get EMAIL_PASSWORD_SIGN_IN_METHOD() {\n    return passwordProviderId;\n  }\n\n  static get PROVIDER_ID() {\n    return passwordProviderId;\n  }\n\n  static credential(email, password) {\n    return {\n      token: email,\n      secret: password,\n      providerId: passwordProviderId\n    };\n  }\n  /**\n   * Initialize an EmailAuthProvider credential using an email and an email link after a sign in with email link operation.\n   * @param email Email address.\n   * @param emailLink Sign-in email link.\n   * @returns {{token: string, secret: string, providerId: string}}\n   */\n\n\n  static credentialWithLink(email, emailLink) {\n    return {\n      token: email,\n      secret: emailLink,\n      providerId: linkProviderId\n    };\n  }\n\n}"],"mappings":";;AAIA,IAAMA,cAAc,GAAG,WAAvB;AACA,IAAMC,kBAAkB,GAAG,UAA3B;;IACqBC,iB;EACnB,6BAAc;IAAA;;IACZ,MAAM,IAAIC,KAAJ,CAAU,yEAAV,CAAN;EACD;;;;SAED,eAAuC;MACrC,OAAOH,cAAP;IACD;;;SAED,eAA2C;MACzC,OAAOC,kBAAP;IACD;;;SAED,eAAyB;MACvB,OAAOA,kBAAP;IACD;;;WAED,oBAAkBG,KAAlB,EAAyBC,QAAzB,EAAmC;MACjC,OAAO;QACLC,KAAK,EAAEF,KADF;QAELG,MAAM,EAAEF,QAFH;QAGLG,UAAU,EAAEP;MAHP,CAAP;IAKD;;;WASD,4BAA0BG,KAA1B,EAAiCK,SAAjC,EAA4C;MAC1C,OAAO;QACLH,KAAK,EAAEF,KADF;QAELG,MAAM,EAAEE,SAFH;QAGLD,UAAU,EAAER;MAHP,CAAP;IAKD;;;;;;SAtCkBE,iB"},"metadata":{},"sourceType":"module"}