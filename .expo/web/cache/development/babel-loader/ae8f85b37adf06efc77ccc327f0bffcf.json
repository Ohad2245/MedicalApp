{"ast":null,"code":"'use strict';\n\nvar isString = require('lodash/lang/isString');\nvar maxYear = 19;\nfunction verification(isValid, isPotentiallyValid, isCurrentYear) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    isCurrentYear: isCurrentYear || false\n  };\n}\nfunction expirationYear(value) {\n  var currentFirstTwo, currentYear, firstTwo, len, twoDigitYear, valid, isCurrentYear;\n  if (!isString(value)) {\n    return verification(false, false);\n  }\n  if (value.replace(/\\s/g, '') === '') {\n    return verification(false, true);\n  }\n  if (!/^\\d*$/.test(value)) {\n    return verification(false, false);\n  }\n  len = value.length;\n  if (len < 2) {\n    return verification(false, true);\n  }\n  currentYear = new Date().getFullYear();\n  if (len === 3) {\n    firstTwo = value.slice(0, 2);\n    currentFirstTwo = String(currentYear).slice(0, 2);\n    return verification(false, firstTwo === currentFirstTwo);\n  }\n  if (len > 4) {\n    return verification(false, false);\n  }\n  value = parseInt(value, 10);\n  twoDigitYear = Number(String(currentYear).substr(2, 2));\n  if (len === 2) {\n    isCurrentYear = twoDigitYear === value;\n    valid = value >= twoDigitYear && value <= twoDigitYear + maxYear;\n  } else if (len === 4) {\n    isCurrentYear = currentYear === value;\n    valid = value >= currentYear && value <= currentYear + maxYear;\n  }\n  return verification(valid, valid, isCurrentYear);\n}\nmodule.exports = expirationYear;","map":{"version":3,"names":["isString","require","maxYear","verification","isValid","isPotentiallyValid","isCurrentYear","expirationYear","value","currentFirstTwo","currentYear","firstTwo","len","twoDigitYear","valid","replace","test","length","Date","getFullYear","slice","String","parseInt","Number","substr","module","exports"],"sources":["C:/Users/PC/Desktop/MedicalApp/my-app/client/node_modules/react-native-credit-card-input-plus/node_modules/card-validator/src/expiration-year.js"],"sourcesContent":["'use strict';\n\nvar isString = require('lodash/lang/isString');\nvar maxYear = 19;\n\nfunction verification(isValid, isPotentiallyValid, isCurrentYear) {\n  return {\n    isValid: isValid,\n    isPotentiallyValid: isPotentiallyValid,\n    isCurrentYear: isCurrentYear || false\n  };\n}\n\nfunction expirationYear(value) {\n  var currentFirstTwo, currentYear, firstTwo, len, twoDigitYear, valid, isCurrentYear;\n\n  if (!isString(value)) {\n    return verification(false, false);\n  }\n  if (value.replace(/\\s/g, '') === '') {\n    return verification(false, true);\n  }\n  if (!/^\\d*$/.test(value)) {\n    return verification(false, false);\n  }\n\n  len = value.length;\n\n  if (len < 2) {\n    return verification(false, true);\n  }\n\n  currentYear = new Date().getFullYear();\n\n  if (len === 3) {\n    // 20x === 20x\n    firstTwo = value.slice(0, 2);\n    currentFirstTwo = String(currentYear).slice(0, 2);\n    return verification(false, firstTwo === currentFirstTwo);\n  }\n\n  if (len > 4) {\n    return verification(false, false);\n  }\n\n  value = parseInt(value, 10);\n  twoDigitYear = Number(String(currentYear).substr(2, 2));\n\n  if (len === 2) {\n    isCurrentYear = twoDigitYear === value;\n    valid = value >= twoDigitYear && value <= twoDigitYear + maxYear;\n  } else if (len === 4) {\n    isCurrentYear = currentYear === value;\n    valid = value >= currentYear && value <= currentYear + maxYear;\n  }\n\n  return verification(valid, valid, isCurrentYear);\n}\n\nmodule.exports = expirationYear;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC9C,IAAIC,OAAO,GAAG,EAAE;AAEhB,SAASC,YAAY,CAACC,OAAO,EAAEC,kBAAkB,EAAEC,aAAa,EAAE;EAChE,OAAO;IACLF,OAAO,EAAEA,OAAO;IAChBC,kBAAkB,EAAEA,kBAAkB;IACtCC,aAAa,EAAEA,aAAa,IAAI;EAClC,CAAC;AACH;AAEA,SAASC,cAAc,CAACC,KAAK,EAAE;EAC7B,IAAIC,eAAe,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,YAAY,EAAEC,KAAK,EAAER,aAAa;EAEnF,IAAI,CAACN,QAAQ,CAACQ,KAAK,CAAC,EAAE;IACpB,OAAOL,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC;EACnC;EACA,IAAIK,KAAK,CAACO,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,EAAE,EAAE;IACnC,OAAOZ,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC;EAClC;EACA,IAAI,CAAC,OAAO,CAACa,IAAI,CAACR,KAAK,CAAC,EAAE;IACxB,OAAOL,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC;EACnC;EAEAS,GAAG,GAAGJ,KAAK,CAACS,MAAM;EAElB,IAAIL,GAAG,GAAG,CAAC,EAAE;IACX,OAAOT,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC;EAClC;EAEAO,WAAW,GAAG,IAAIQ,IAAI,EAAE,CAACC,WAAW,EAAE;EAEtC,IAAIP,GAAG,KAAK,CAAC,EAAE;IAEbD,QAAQ,GAAGH,KAAK,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAC5BX,eAAe,GAAGY,MAAM,CAACX,WAAW,CAAC,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACjD,OAAOjB,YAAY,CAAC,KAAK,EAAEQ,QAAQ,KAAKF,eAAe,CAAC;EAC1D;EAEA,IAAIG,GAAG,GAAG,CAAC,EAAE;IACX,OAAOT,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC;EACnC;EAEAK,KAAK,GAAGc,QAAQ,CAACd,KAAK,EAAE,EAAE,CAAC;EAC3BK,YAAY,GAAGU,MAAM,CAACF,MAAM,CAACX,WAAW,CAAC,CAACc,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAEvD,IAAIZ,GAAG,KAAK,CAAC,EAAE;IACbN,aAAa,GAAGO,YAAY,KAAKL,KAAK;IACtCM,KAAK,GAAGN,KAAK,IAAIK,YAAY,IAAIL,KAAK,IAAIK,YAAY,GAAGX,OAAO;EAClE,CAAC,MAAM,IAAIU,GAAG,KAAK,CAAC,EAAE;IACpBN,aAAa,GAAGI,WAAW,KAAKF,KAAK;IACrCM,KAAK,GAAGN,KAAK,IAAIE,WAAW,IAAIF,KAAK,IAAIE,WAAW,GAAGR,OAAO;EAChE;EAEA,OAAOC,YAAY,CAACW,KAAK,EAAEA,KAAK,EAAER,aAAa,CAAC;AAClD;AAEAmB,MAAM,CAACC,OAAO,GAAGnB,cAAc"},"metadata":{},"sourceType":"script"}