{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { getAppEventName, SharedEventEmitter } from \"../../utils/events\";\nimport { getLogger } from \"../../utils/log\";\nimport { getNativeModule } from \"../../utils/native\";\nvar transactionId = 0;\n\nvar generateTransactionId = function generateTransactionId() {\n  return transactionId++;\n};\n\nvar TransactionHandler = function () {\n  function TransactionHandler(database) {\n    _classCallCheck(this, TransactionHandler);\n\n    this._transactions = {};\n    this._database = database;\n    SharedEventEmitter.addListener(getAppEventName(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n\n  _createClass(TransactionHandler, [{\n    key: \"add\",\n    value: function add(reference, transactionUpdater, onComplete) {\n      var applyLocally = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var id = generateTransactionId();\n      this._transactions[id] = {\n        id: id,\n        reference: reference,\n        transactionUpdater: transactionUpdater,\n        onComplete: onComplete,\n        applyLocally: applyLocally,\n        completed: false,\n        started: true\n      };\n      getNativeModule(this._database).transactionStart(reference.path, id, applyLocally);\n    }\n  }, {\n    key: \"_handleTransactionEvent\",\n    value: function _handleTransactionEvent() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      switch (event.type) {\n        case 'update':\n          return this._handleUpdate(event);\n\n        case 'error':\n          return this._handleError(event);\n\n        case 'complete':\n          return this._handleComplete(event);\n\n        default:\n          getLogger(this._database).warn(\"Unknown transaction event type: '\" + event.type + \"'\", event);\n          return undefined;\n      }\n    }\n  }, {\n    key: \"_handleUpdate\",\n    value: function _handleUpdate() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var newValue;\n      var id = event.id,\n          value = event.value;\n\n      try {\n        var transaction = this._transactions[id];\n        if (!transaction) return;\n        newValue = transaction.transactionUpdater(value);\n      } finally {\n        var abort = false;\n\n        if (newValue === undefined) {\n          abort = true;\n        }\n\n        getNativeModule(this._database).transactionTryCommit(id, {\n          value: newValue,\n          abort: abort\n        });\n      }\n    }\n  }, {\n    key: \"_handleError\",\n    value: function _handleError() {\n      var _this = this;\n\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var transaction = this._transactions[event.id];\n\n      if (transaction && !transaction.completed) {\n        transaction.completed = true;\n\n        try {\n          transaction.onComplete(event.error, false, null);\n        } finally {\n          setImmediate(function () {\n            delete _this._transactions[event.id];\n          });\n        }\n      }\n    }\n  }, {\n    key: \"_handleComplete\",\n    value: function _handleComplete() {\n      var _this2 = this;\n\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var transaction = this._transactions[event.id];\n\n      if (transaction && !transaction.completed) {\n        transaction.completed = true;\n\n        try {\n          transaction.onComplete(null, event.committed, _extends({}, event.snapshot));\n        } finally {\n          setImmediate(function () {\n            delete _this2._transactions[event.id];\n          });\n        }\n      }\n    }\n  }]);\n\n  return TransactionHandler;\n}();\n\nexport { TransactionHandler as default };","map":{"version":3,"names":["getAppEventName","SharedEventEmitter","getLogger","getNativeModule","transactionId","generateTransactionId","TransactionHandler","database","_transactions","_database","addListener","_handleTransactionEvent","bind","reference","transactionUpdater","onComplete","applyLocally","id","completed","started","transactionStart","path","event","type","_handleUpdate","_handleError","_handleComplete","warn","undefined","newValue","value","transaction","abort","transactionTryCommit","error","setImmediate","committed","snapshot"],"sources":["C:/Users/PC/Desktop/All/StoreApp2/my-app/node_modules/react-native-firebase/dist/modules/database/transaction.js"],"sourcesContent":["/**\n * \n * Database Transaction representation wrapper\n */\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nlet transactionId = 0;\n/**\n * Uses the push id generator to create a transaction id\n * @returns {number}\n * @private\n */\n\nconst generateTransactionId = () => transactionId++;\n/**\n * @class TransactionHandler\n */\n\n\nexport default class TransactionHandler {\n  constructor(database) {\n    this._transactions = {};\n    this._database = database;\n    SharedEventEmitter.addListener(getAppEventName(this._database, 'database_transaction_event'), this._handleTransactionEvent.bind(this));\n  }\n  /**\n   * Add a new transaction and start it natively.\n   * @param reference\n   * @param transactionUpdater\n   * @param onComplete\n   * @param applyLocally\n   */\n\n\n  add(reference, transactionUpdater, onComplete, applyLocally = false) {\n    const id = generateTransactionId();\n    this._transactions[id] = {\n      id,\n      reference,\n      transactionUpdater,\n      onComplete,\n      applyLocally,\n      completed: false,\n      started: true\n    };\n    getNativeModule(this._database).transactionStart(reference.path, id, applyLocally);\n  }\n  /**\n   *  INTERNALS\n   */\n\n  /**\n   *\n   * @param event\n   * @returns {*}\n   * @private\n   */\n\n\n  _handleTransactionEvent(event = {}) {\n    switch (event.type) {\n      case 'update':\n        return this._handleUpdate(event);\n\n      case 'error':\n        return this._handleError(event);\n\n      case 'complete':\n        return this._handleComplete(event);\n\n      default:\n        getLogger(this._database).warn(`Unknown transaction event type: '${event.type}'`, event);\n        return undefined;\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleUpdate(event = {}) {\n    let newValue;\n    const {\n      id,\n      value\n    } = event;\n\n    try {\n      const transaction = this._transactions[id];\n      if (!transaction) return;\n      newValue = transaction.transactionUpdater(value);\n    } finally {\n      let abort = false;\n\n      if (newValue === undefined) {\n        abort = true;\n      }\n\n      getNativeModule(this._database).transactionTryCommit(id, {\n        value: newValue,\n        abort\n      });\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleError(event = {}) {\n    const transaction = this._transactions[event.id];\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        transaction.onComplete(event.error, false, null);\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleComplete(event = {}) {\n    const transaction = this._transactions[event.id];\n\n    if (transaction && !transaction.completed) {\n      transaction.completed = true;\n\n      try {\n        transaction.onComplete(null, event.committed, Object.assign({}, event.snapshot));\n      } finally {\n        setImmediate(() => {\n          delete this._transactions[event.id];\n        });\n      }\n    }\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}