{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport INTERNALS from \"../../utils/internals\";\nimport { isIOS } from \"../../utils\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport DatabaseUtils from \"./database\";\nvar FirebaseCoreModule = NativeModules.RNFirebase;\nexport var MODULE_NAME = 'RNFirebaseUtils';\nexport var NAMESPACE = 'utils';\n\nvar RNFirebaseUtils = function (_ModuleBase) {\n  _inherits(RNFirebaseUtils, _ModuleBase);\n\n  var _super = _createSuper(RNFirebaseUtils);\n\n  function RNFirebaseUtils(app) {\n    _classCallCheck(this, RNFirebaseUtils);\n\n    return _super.call(this, app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  _createClass(RNFirebaseUtils, [{\n    key: \"database\",\n    get: function get() {\n      return DatabaseUtils;\n    }\n  }, {\n    key: \"checkPlayServicesAvailability\",\n    value: function checkPlayServicesAvailability() {\n      if (isIOS) return;\n      var status = this.playServicesAvailability.status;\n\n      if (!this.playServicesAvailability.isAvailable) {\n        if (INTERNALS.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {\n          this.promptForPlayServices();\n        } else {\n          var error = INTERNALS.STRINGS.ERROR_PLAY_SERVICES(status);\n\n          if (INTERNALS.OPTIONS.errorOnMissingPlayServices) {\n            if (status === 2) console.warn(error);else throw new Error(error);\n          } else {\n            console.warn(error);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"getPlayServicesStatus\",\n    value: function getPlayServicesStatus() {\n      if (isIOS) return Promise.resolve(null);\n      return FirebaseCoreModule.getPlayServicesStatus();\n    }\n  }, {\n    key: \"promptForPlayServices\",\n    value: function promptForPlayServices() {\n      if (isIOS) return null;\n      return FirebaseCoreModule.promptForPlayServices();\n    }\n  }, {\n    key: \"resolutionForPlayServices\",\n    value: function resolutionForPlayServices() {\n      if (isIOS) return null;\n      return FirebaseCoreModule.resolutionForPlayServices();\n    }\n  }, {\n    key: \"makePlayServicesAvailable\",\n    value: function makePlayServicesAvailable() {\n      if (isIOS) return null;\n      return FirebaseCoreModule.makePlayServicesAvailable();\n    }\n  }, {\n    key: \"logLevel\",\n    set: function set(logLevel) {\n      INTERNALS.OPTIONS.logLevel = logLevel;\n    }\n  }, {\n    key: \"playServicesAvailability\",\n    get: function get() {\n      return FirebaseCoreModule.playServicesAvailability || {\n        isAvailable: true,\n        status: 0\n      };\n    }\n  }, {\n    key: \"errorOnMissingPlayServices\",\n    set: function set(bool) {\n      INTERNALS.OPTIONS.errorOnMissingPlayServices = bool;\n    }\n  }, {\n    key: \"promptOnMissingPlayServices\",\n    set: function set(bool) {\n      INTERNALS.OPTIONS.promptOnMissingPlayServices = bool;\n    }\n  }]);\n\n  return RNFirebaseUtils;\n}(ModuleBase);\n\nexport { RNFirebaseUtils as default };\nexport var statics = {};","map":{"version":3,"names":["INTERNALS","isIOS","ModuleBase","DatabaseUtils","FirebaseCoreModule","NativeModules","RNFirebase","MODULE_NAME","NAMESPACE","RNFirebaseUtils","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","status","playServicesAvailability","isAvailable","OPTIONS","promptOnMissingPlayServices","isUserResolvableError","promptForPlayServices","error","STRINGS","ERROR_PLAY_SERVICES","errorOnMissingPlayServices","console","warn","Error","Promise","resolve","getPlayServicesStatus","resolutionForPlayServices","makePlayServicesAvailable","logLevel","bool","statics"],"sources":["C:/Users/PC/Desktop/All/StoreApp2/my-app/node_modules/react-native-firebase/dist/modules/utils/index.js"],"sourcesContent":["import { NativeModules } from 'react-native';\nimport INTERNALS from '../../utils/internals';\nimport { isIOS } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport DatabaseUtils from './database';\nconst FirebaseCoreModule = NativeModules.RNFirebase;\nexport const MODULE_NAME = 'RNFirebaseUtils';\nexport const NAMESPACE = 'utils';\nexport default class RNFirebaseUtils extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  get database() {\n    return DatabaseUtils;\n  }\n  /**\n   *\n   */\n\n\n  checkPlayServicesAvailability() {\n    if (isIOS) return;\n    const {\n      status\n    } = this.playServicesAvailability;\n\n    if (!this.playServicesAvailability.isAvailable) {\n      if (INTERNALS.OPTIONS.promptOnMissingPlayServices && this.playServicesAvailability.isUserResolvableError) {\n        this.promptForPlayServices();\n      } else {\n        const error = INTERNALS.STRINGS.ERROR_PLAY_SERVICES(status);\n\n        if (INTERNALS.OPTIONS.errorOnMissingPlayServices) {\n          if (status === 2) console.warn(error); // only warn if it exists but may need an update\n          else throw new Error(error);\n        } else {\n          console.warn(error);\n        }\n      }\n    }\n  }\n\n  getPlayServicesStatus() {\n    if (isIOS) return Promise.resolve(null);\n    return FirebaseCoreModule.getPlayServicesStatus();\n  }\n\n  promptForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.promptForPlayServices();\n  }\n\n  resolutionForPlayServices() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.resolutionForPlayServices();\n  }\n\n  makePlayServicesAvailable() {\n    if (isIOS) return null;\n    return FirebaseCoreModule.makePlayServicesAvailable();\n  }\n  /**\n   * Set the global logging level for all logs.\n   *\n   * @param logLevel\n   */\n\n\n  set logLevel(logLevel) {\n    INTERNALS.OPTIONS.logLevel = logLevel;\n  }\n  /**\n   * Returns props from the android GoogleApiAvailability sdk\n   * @android\n   * @return {RNFirebase.GoogleApiAvailabilityType|{isAvailable: boolean, status: number}}\n   */\n\n\n  get playServicesAvailability() {\n    return FirebaseCoreModule.playServicesAvailability || {\n      isAvailable: true,\n      status: 0\n    };\n  }\n  /**\n   * Enable/Disable throwing an error or warning on detecting a play services problem\n   * @android\n   * @param bool\n   */\n\n\n  set errorOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.errorOnMissingPlayServices = bool;\n  }\n  /**\n   * Enable/Disable automatic prompting of the play services update dialog\n   * @android\n   * @param bool\n   */\n\n\n  set promptOnMissingPlayServices(bool) {\n    INTERNALS.OPTIONS.promptOnMissingPlayServices = bool;\n  }\n\n}\nexport const statics = {};"],"mappings":";;;;;;;;;;;AACA,OAAOA,SAAP;AACA,SAASC,KAAT;AACA,OAAOC,UAAP;AACA,OAAOC,aAAP;AACA,IAAMC,kBAAkB,GAAGC,aAAa,CAACC,UAAzC;AACA,OAAO,IAAMC,WAAW,GAAG,iBAApB;AACP,OAAO,IAAMC,SAAS,GAAG,OAAlB;;IACcC,e;;;;;EACnB,yBAAYC,GAAZ,EAAiB;IAAA;;IAAA,yBACTA,GADS,EACJ;MACTC,UAAU,EAAEJ,WADH;MAETK,kBAAkB,EAAE,KAFX;MAGTC,mBAAmB,EAAE,KAHZ;MAITC,SAAS,EAAEN;IAJF,CADI;EAOhB;;;;SAED,eAAe;MACb,OAAOL,aAAP;IACD;;;WAMD,yCAAgC;MAC9B,IAAIF,KAAJ,EAAW;MACX,IACEc,MADF,GAEI,KAAKC,wBAFT,CACED,MADF;;MAIA,IAAI,CAAC,KAAKC,wBAAL,CAA8BC,WAAnC,EAAgD;QAC9C,IAAIjB,SAAS,CAACkB,OAAV,CAAkBC,2BAAlB,IAAiD,KAAKH,wBAAL,CAA8BI,qBAAnF,EAA0G;UACxG,KAAKC,qBAAL;QACD,CAFD,MAEO;UACL,IAAMC,KAAK,GAAGtB,SAAS,CAACuB,OAAV,CAAkBC,mBAAlB,CAAsCT,MAAtC,CAAd;;UAEA,IAAIf,SAAS,CAACkB,OAAV,CAAkBO,0BAAtB,EAAkD;YAChD,IAAIV,MAAM,KAAK,CAAf,EAAkBW,OAAO,CAACC,IAAR,CAAaL,KAAb,EAAlB,KACK,MAAM,IAAIM,KAAJ,CAAUN,KAAV,CAAN;UACN,CAHD,MAGO;YACLI,OAAO,CAACC,IAAR,CAAaL,KAAb;UACD;QACF;MACF;IACF;;;WAED,iCAAwB;MACtB,IAAIrB,KAAJ,EAAW,OAAO4B,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;MACX,OAAO1B,kBAAkB,CAAC2B,qBAAnB,EAAP;IACD;;;WAED,iCAAwB;MACtB,IAAI9B,KAAJ,EAAW,OAAO,IAAP;MACX,OAAOG,kBAAkB,CAACiB,qBAAnB,EAAP;IACD;;;WAED,qCAA4B;MAC1B,IAAIpB,KAAJ,EAAW,OAAO,IAAP;MACX,OAAOG,kBAAkB,CAAC4B,yBAAnB,EAAP;IACD;;;WAED,qCAA4B;MAC1B,IAAI/B,KAAJ,EAAW,OAAO,IAAP;MACX,OAAOG,kBAAkB,CAAC6B,yBAAnB,EAAP;IACD;;;SAQD,aAAaC,QAAb,EAAuB;MACrBlC,SAAS,CAACkB,OAAV,CAAkBgB,QAAlB,GAA6BA,QAA7B;IACD;;;SAQD,eAA+B;MAC7B,OAAO9B,kBAAkB,CAACY,wBAAnB,IAA+C;QACpDC,WAAW,EAAE,IADuC;QAEpDF,MAAM,EAAE;MAF4C,CAAtD;IAID;;;SAQD,aAA+BoB,IAA/B,EAAqC;MACnCnC,SAAS,CAACkB,OAAV,CAAkBO,0BAAlB,GAA+CU,IAA/C;IACD;;;SAQD,aAAgCA,IAAhC,EAAsC;MACpCnC,SAAS,CAACkB,OAAV,CAAkBC,2BAAlB,GAAgDgB,IAAhD;IACD;;;;EArG0CjC,U;;SAAxBO,e;AAwGrB,OAAO,IAAM2B,OAAO,GAAG,EAAhB"},"metadata":{},"sourceType":"module"}