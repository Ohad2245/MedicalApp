{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\nvar InputLabel = function InputLabel(props) {\n  var parentState = props.parentState,\n    labelBackground = props.labelBackground;\n  var _props$labelProps = props.labelProps,\n    label = _props$labelProps.label,\n    error = _props$labelProps.error,\n    onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,\n    hasActiveOutline = _props$labelProps.hasActiveOutline,\n    activeColor = _props$labelProps.activeColor,\n    placeholderStyle = _props$labelProps.placeholderStyle,\n    baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,\n    baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,\n    font = _props$labelProps.font,\n    fontSize = _props$labelProps.fontSize,\n    lineHeight = _props$labelProps.lineHeight,\n    fontWeight = _props$labelProps.fontWeight,\n    placeholderOpacity = _props$labelProps.placeholderOpacity,\n    wiggleOffsetX = _props$labelProps.wiggleOffsetX,\n    labelScale = _props$labelProps.labelScale,\n    topPosition = _props$labelProps.topPosition,\n    paddingOffset = _props$labelProps.paddingOffset,\n    placeholderColor = _props$labelProps.placeholderColor,\n    errorColor = _props$labelProps.errorColor,\n    labelTranslationXOffset = _props$labelProps.labelTranslationXOffset,\n    maxFontSizeMultiplier = _props$labelProps.maxFontSizeMultiplier,\n    testID = _props$labelProps.testID,\n    contentStyle = _props$labelProps.contentStyle,\n    theme = _props$labelProps.theme;\n  var labelTranslationX = {\n    transform: [{\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n  var labelStyle = _objectSpread(_objectSpread({}, font), {}, {\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    fontWeight: fontWeight,\n    transform: [{\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  });\n  var textColor = error && errorColor ? errorColor : placeholderColor;\n  var opacity = parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1;\n  return label ? React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: opacity\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState: parentState,\n    labelStyle: labelStyle,\n    theme: theme,\n    labelProps: props.labelProps,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }), React.createElement(AnimatedText, {\n    variant: \"bodySmall\",\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: testID + \"-label-active\"\n  }, label), React.createElement(AnimatedText, {\n    variant: parentState.focused ? 'bodyLarge' : 'bodySmall',\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: textColor,\n      opacity: placeholderOpacity\n    }, contentStyle],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: testID + \"-label-inactive\"\n  }, label)) : null;\n};\nvar styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nexport default InputLabel;","map":{"version":3,"sources":["InputLabel.tsx"],"names":["React","AnimatedText","InputLabel","props","parentState","labelBackground","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","lineHeight","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","testID","contentStyle","theme","labelProps","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","textColor","opacity","focused","labelLayout","measured","StyleSheet","absoluteFill","styles","labelContainer","top","color","create","zIndex"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\nconst InputLabel = props => {\n  const {\n    parentState,\n    labelBackground\n  } = props;\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n    testID,\n    contentStyle,\n    theme\n  } = props.labelProps;\n  const labelTranslationX = {\n    transform: [{\n      // Offset label scale since RN doesn't support transform origin\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n  const labelStyle = {\n    ...font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    transform: [{\n      // Wiggle the label when there's an error\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      // Move label to top\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      // Make label smaller\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  };\n  const textColor = error && errorColor ? errorColor : placeholderColor;\n  // Hide the label in minimized state until we measure it's width\n  const opacity = parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1;\n  return label ?\n  /*#__PURE__*/\n  // Position colored placeholder and gray placeholder on top of each other and crossfade them\n  // This gives the effect of animating the color, but allows us to use native driver\n  React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState,\n    labelStyle,\n    theme,\n    labelProps: props.labelProps,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }), /*#__PURE__*/React.createElement(AnimatedText, {\n    variant: \"bodySmall\",\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: `${testID}-label-active`\n  }, label), /*#__PURE__*/React.createElement(AnimatedText, {\n    variant: parentState.focused ? 'bodyLarge' : 'bodySmall',\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: textColor,\n      opacity: placeholderOpacity\n    }, contentStyle],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    testID: `${testID}-label-inactive`\n  }, label)) : null;\n};\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nexport default InputLabel;\n//# sourceMappingURL=InputLabel.js.map"]},"metadata":{},"sourceType":"module"}