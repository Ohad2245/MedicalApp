{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"iconColor\", \"containerColor\", \"size\", \"accessibilityLabel\", \"disabled\", \"onPress\", \"selected\", \"animated\", \"mode\", \"style\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { forwardRef } from \"../../utils/forwardRef\";\nimport CrossFadeIcon from \"../CrossFadeIcon\";\nimport Icon from \"../Icon\";\nimport Surface from \"../Surface\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { getIconButtonColor } from \"./utils\";\nvar PADDING = 8;\nvar IconButton = forwardRef(function (_ref, ref) {\n  var icon = _ref.icon,\n    customIconColor = _ref.iconColor,\n    customContainerColor = _ref.containerColor,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 24 : _ref$size,\n    accessibilityLabel = _ref.accessibilityLabel,\n    disabled = _ref.disabled,\n    onPress = _ref.onPress,\n    _ref$selected = _ref.selected,\n    selected = _ref$selected === void 0 ? false : _ref$selected,\n    _ref$animated = _ref.animated,\n    animated = _ref$animated === void 0 ? false : _ref$animated,\n    mode = _ref.mode,\n    style = _ref.style,\n    themeOverrides = _ref.theme,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var theme = useInternalTheme(themeOverrides);\n  var isV3 = theme.isV3;\n  var IconComponent = animated ? CrossFadeIcon : Icon;\n  var _getIconButtonColor = getIconButtonColor({\n      theme: theme,\n      disabled: disabled,\n      selected: selected,\n      mode: mode,\n      customIconColor: customIconColor,\n      customContainerColor: customContainerColor\n    }),\n    iconColor = _getIconButtonColor.iconColor,\n    rippleColor = _getIconButtonColor.rippleColor,\n    backgroundColor = _getIconButtonColor.backgroundColor,\n    borderColor = _getIconButtonColor.borderColor;\n  var buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  var _ref2 = StyleSheet.flatten(style) || {},\n    _ref2$borderWidth = _ref2.borderWidth,\n    borderWidth = _ref2$borderWidth === void 0 ? isV3 && mode === 'outlined' && !selected ? 1 : 0 : _ref2$borderWidth,\n    _ref2$borderRadius = _ref2.borderRadius,\n    borderRadius = _ref2$borderRadius === void 0 ? buttonSize / 2 : _ref2$borderRadius;\n  var borderStyles = {\n    borderWidth: borderWidth,\n    borderRadius: borderRadius,\n    borderColor: borderColor\n  };\n  return React.createElement(Surface, _extends({\n    ref: ref,\n    style: [{\n      backgroundColor: backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: [styles.touchable, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled: disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n});\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default IconButton;","map":{"version":3,"sources":["IconButton.tsx"],"names":["React","useInternalTheme","forwardRef","CrossFadeIcon","Icon","Surface","TouchableRipple","getIconButtonColor","PADDING","IconButton","icon","iconColor","customIconColor","containerColor","customContainerColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","style","theme","themeOverrides","rest","ref","isV3","IconComponent","rippleColor","backgroundColor","borderColor","buttonSize","borderWidth","borderRadius","StyleSheet","flatten","borderStyles","width","height","styles","container","elevation","touchable","supported","top","left","bottom","right","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { useInternalTheme } from '../../core/theming';\nimport { forwardRef } from '../../utils/forwardRef';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getIconButtonColor } from './utils';\nconst PADDING = 8;\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Default icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Contained icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-3.png\" />\n *     <figcaption>Contained-tonal icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-4.png\" />\n *     <figcaption>Outlined icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = forwardRef((_ref, ref) => {\n  let {\n    icon,\n    iconColor: customIconColor,\n    containerColor: customContainerColor,\n    size = 24,\n    accessibilityLabel,\n    disabled,\n    onPress,\n    selected = false,\n    animated = false,\n    mode,\n    style,\n    theme: themeOverrides,\n    ...rest\n  } = _ref;\n  const theme = useInternalTheme(themeOverrides);\n  const {\n    isV3\n  } = theme;\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n  const {\n    iconColor,\n    rippleColor,\n    backgroundColor,\n    borderColor\n  } = getIconButtonColor({\n    theme,\n    disabled,\n    selected,\n    mode,\n    customIconColor,\n    customContainerColor\n  });\n  const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n  const {\n    borderWidth = isV3 && mode === 'outlined' && !selected ? 1 : 0,\n    borderRadius = buttonSize / 2\n  } = StyleSheet.flatten(style) || {};\n  const borderStyles = {\n    borderWidth,\n    borderRadius,\n    borderColor\n  };\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    ref: ref,\n    style: [{\n      backgroundColor,\n      width: buttonSize,\n      height: buttonSize\n    }, styles.container, borderStyles, !isV3 && disabled && styles.disabled, style]\n  }, isV3 && {\n    elevation: 0\n  }), /*#__PURE__*/React.createElement(TouchableRipple, _extends({\n    borderless: true,\n    centered: true,\n    onPress: onPress,\n    rippleColor: rippleColor,\n    accessibilityLabel: accessibilityLabel,\n    style: [styles.touchable, {\n      borderRadius\n    }]\n    // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled\n    },\n    disabled: disabled,\n    hitSlop: TouchableRipple.supported ? {\n      top: 10,\n      left: 10,\n      bottom: 10,\n      right: 10\n    } : {\n      top: 6,\n      left: 6,\n      bottom: 6,\n      right: 6\n    }\n  }, rest), /*#__PURE__*/React.createElement(IconComponent, {\n    color: iconColor,\n    source: icon,\n    size: size\n  })));\n});\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  disabled: {\n    opacity: 0.32\n  }\n});\nexport default IconButton;\n//# sourceMappingURL=IconButton.js.map"]},"metadata":{},"sourceType":"module"}