{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport PropTypes from 'prop-types';\nimport React, { Fragment, PureComponent } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport styles, { borderRadius } from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Line = function (_PureComponent) {\n  _inherits(Line, _PureComponent);\n  var _super = _createSuper(Line);\n  function Line() {\n    _classCallCheck(this, Line);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Line, [{\n    key: \"borderProps\",\n    value: function borderProps() {\n      var _this$props = this.props,\n        disabled = _this$props.disabled,\n        restricted = _this$props.restricted,\n        lineType = _this$props.lineType,\n        lineWidth = _this$props.lineWidth,\n        activeLineWidth = _this$props.activeLineWidth,\n        disabledLineWidth = _this$props.disabledLineWidth,\n        baseColor = _this$props.baseColor,\n        tintColor = _this$props.tintColor,\n        errorColor = _this$props.errorColor,\n        focusAnimation = _this$props.focusAnimation;\n      if (disabled) {\n        return {\n          borderColor: baseColor,\n          borderWidth: disabledLineWidth\n        };\n      }\n      if (restricted) {\n        return {\n          borderColor: errorColor,\n          borderWidth: activeLineWidth\n        };\n      }\n      return {\n        borderColor: focusAnimation.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [errorColor, baseColor, tintColor]\n        }),\n        borderWidth: focusAnimation.interpolate({\n          inputRange: [-1, 0, 1],\n          outputRange: [activeLineWidth, lineWidth, activeLineWidth]\n        }),\n        borderStyle: lineType\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        lineType = _this$props2.lineType,\n        labelWidth = _this$props2.labelWidth,\n        labelAnimation = _this$props2.labelAnimation,\n        contentInset = _this$props2.contentInset;\n      if ('none' === lineType) {\n        return null;\n      }\n      var labelOffset = 2 * (contentInset.left - 2 * borderRadius);\n      var lineOffset = Animated.add(labelWidth, labelOffset);\n      var topLineContainerStyle = {\n        transform: [{\n          scaleX: I18nManager.isRTL ? -1 : 1\n        }, {\n          translateX: Animated.multiply(labelAnimation, lineOffset)\n        }]\n      };\n      var leftContainerStyle = {\n        width: contentInset.left - borderRadius\n      };\n      var rightContainerStyle = {\n        width: contentInset.right - borderRadius\n      };\n      var topContainerStyle = {\n        left: leftContainerStyle.width,\n        right: rightContainerStyle.width\n      };\n      var lineStyle = this.borderProps();\n      return _jsxs(Fragment, {\n        children: [_jsx(View, {\n          style: [styles.topContainer, topContainerStyle],\n          pointerEvents: \"none\",\n          children: _jsx(Animated.View, {\n            style: [styles.topLineContainer, topLineContainerStyle],\n            children: _jsx(Animated.View, {\n              style: [styles.borderTop, lineStyle]\n            })\n          })\n        }), _jsx(View, {\n          style: [styles.rightContainer, rightContainerStyle],\n          pointerEvents: \"none\",\n          children: _jsx(Animated.View, {\n            style: [styles.borderRight, lineStyle]\n          })\n        }), _jsx(View, {\n          style: styles.bottomContainer,\n          pointerEvents: \"none\",\n          children: _jsx(Animated.View, {\n            style: [styles.borderBottom, lineStyle]\n          })\n        }), _jsx(View, {\n          style: [styles.leftContainer, leftContainerStyle],\n          pointerEvents: \"none\",\n          children: _jsx(Animated.View, {\n            style: [styles.borderLeft, lineStyle]\n          })\n        })]\n      });\n    }\n  }]);\n  return Line;\n}(PureComponent);\nLine.defaultProps = {\n  lineType: 'solid',\n  disabled: false,\n  restricted: false\n};\nLine.propTypes = {\n  lineType: PropTypes.oneOf(['solid', 'none']),\n  disabled: PropTypes.bool,\n  restricted: PropTypes.bool,\n  tintColor: PropTypes.string,\n  baseColor: PropTypes.string,\n  errorColor: PropTypes.string,\n  lineWidth: PropTypes.number,\n  activeLineWidth: PropTypes.number,\n  disabledLineWidth: PropTypes.number,\n  focusAnimation: PropTypes.instanceOf(Animated.Value),\n  labelAnimation: PropTypes.instanceOf(Animated.Value),\n  labelWidth: PropTypes.instanceOf(Animated.Value),\n  contentInset: PropTypes.shape({\n    left: PropTypes.number,\n    right: PropTypes.number\n  })\n};\nexport { Line as default };","map":{"version":3,"names":["PropTypes","React","Fragment","PureComponent","styles","borderRadius","Line","props","disabled","restricted","lineType","lineWidth","activeLineWidth","disabledLineWidth","baseColor","tintColor","errorColor","focusAnimation","borderColor","borderWidth","interpolate","inputRange","outputRange","borderStyle","labelWidth","labelAnimation","contentInset","labelOffset","left","lineOffset","Animated","add","topLineContainerStyle","transform","scaleX","I18nManager","isRTL","translateX","multiply","leftContainerStyle","width","rightContainerStyle","right","topContainerStyle","lineStyle","borderProps","topContainer","topLineContainer","borderTop","rightContainer","borderRight","bottomContainer","borderBottom","leftContainer","borderLeft","defaultProps","propTypes","oneOf","bool","string","number","instanceOf","Value","shape"],"sources":["C:/Users/PC/Desktop/MedicalApp/my-app/client/node_modules/react-native-material-textfield/src/components/outline/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Fragment, PureComponent } from 'react';\nimport { View, Animated, I18nManager } from 'react-native';\n\nimport styles, { borderRadius } from './styles';\n\nexport default class Line extends PureComponent {\n  static defaultProps = {\n    lineType: 'solid',\n    disabled: false,\n    restricted: false,\n  };\n\n  static propTypes = {\n    lineType: PropTypes.oneOf(['solid', 'none']),\n\n    disabled: PropTypes.bool,\n    restricted: PropTypes.bool,\n\n    tintColor: PropTypes.string,\n    baseColor: PropTypes.string,\n    errorColor: PropTypes.string,\n\n    lineWidth: PropTypes.number,\n    activeLineWidth: PropTypes.number,\n    disabledLineWidth: PropTypes.number,\n\n    focusAnimation: PropTypes.instanceOf(Animated.Value),\n    labelAnimation: PropTypes.instanceOf(Animated.Value),\n    labelWidth: PropTypes.instanceOf(Animated.Value),\n\n    contentInset: PropTypes.shape({\n      left: PropTypes.number,\n      right: PropTypes.number,\n    }),\n  };\n\n  borderProps() {\n    let {\n      disabled,\n      restricted,\n      lineType,\n      lineWidth,\n      activeLineWidth,\n      disabledLineWidth,\n      baseColor,\n      tintColor,\n      errorColor,\n      focusAnimation,\n    } = this.props;\n\n    if (disabled) {\n      return {\n        borderColor: baseColor,\n        borderWidth: disabledLineWidth,\n      };\n    }\n\n    if (restricted) {\n      return {\n        borderColor: errorColor,\n        borderWidth: activeLineWidth,\n      };\n    }\n\n    return {\n      borderColor: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [errorColor, baseColor, tintColor],\n      }),\n\n      borderWidth: focusAnimation.interpolate({\n        inputRange: [-1, 0, 1],\n        outputRange: [activeLineWidth, lineWidth, activeLineWidth],\n      }),\n\n      borderStyle: lineType,\n    };\n  }\n\n  render() {\n    let { lineType, labelWidth, labelAnimation, contentInset } = this.props;\n\n    if ('none' === lineType) {\n      return null;\n    }\n\n    let labelOffset = 2 * (contentInset.left - 2 * borderRadius);\n    let lineOffset = Animated.add(labelWidth, labelOffset);\n\n    let topLineContainerStyle = {\n      transform: [{\n        scaleX: I18nManager.isRTL? -1 : 1,\n      }, {\n        translateX: Animated.multiply(labelAnimation, lineOffset),\n      }],\n    };\n\n    let leftContainerStyle = {\n      width: contentInset.left - borderRadius,\n    };\n\n    let rightContainerStyle = {\n      width: contentInset.right - borderRadius,\n    };\n\n    let topContainerStyle = {\n      left: leftContainerStyle.width,\n      right: rightContainerStyle.width,\n    };\n\n    let lineStyle = this.borderProps();\n\n    return (\n      <Fragment>\n        <View style={[styles.topContainer, topContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.topLineContainer, topLineContainerStyle]}>\n            <Animated.View style={[styles.borderTop, lineStyle]} />\n          </Animated.View>\n        </View>\n\n        <View style={[styles.rightContainer, rightContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.borderRight, lineStyle]} />\n        </View>\n\n        <View style={styles.bottomContainer} pointerEvents='none'>\n          <Animated.View style={[styles.borderBottom, lineStyle]} />\n        </View>\n\n        <View style={[styles.leftContainer, leftContainerStyle]} pointerEvents='none'>\n          <Animated.View style={[styles.borderLeft, lineStyle]} />\n        </View>\n      </Fragment>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}