{"ast":null,"code":"'use strict';\n\nvar expirationYear = require(\"./expiration-year\");\nvar isArray = require('lodash/lang/isArray');\nfunction parseDate(value) {\n  var month, len, year, yearValid;\n  if (/\\//.test(value)) {\n    value = value.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(value)) {\n    value = value.split(/ +/g);\n  }\n  if (isArray(value)) {\n    return {\n      month: value[0],\n      year: value.slice(1).join()\n    };\n  }\n  len = value[0] === '0' || value.length > 5 ? 2 : 1;\n  if (value[0] === '1') {\n    year = value.substr(1);\n    yearValid = expirationYear(year);\n    if (!yearValid.isPotentiallyValid) {\n      len = 2;\n    }\n  }\n  month = value.substr(0, len);\n  return {\n    month: month,\n    year: value.substr(month.length)\n  };\n}\nmodule.exports = parseDate;","map":{"version":3,"names":["expirationYear","require","isArray","parseDate","value","month","len","year","yearValid","test","split","slice","join","length","substr","isPotentiallyValid","module","exports"],"sources":["C:/Users/PC/Desktop/MedicalApp/my-app/client/node_modules/react-native-credit-card-input-plus/node_modules/card-validator/src/parse-date.js"],"sourcesContent":["'use strict';\n\nvar expirationYear = require('./expiration-year');\nvar isArray = require('lodash/lang/isArray');\n\nfunction parseDate(value) {\n  var month, len, year, yearValid;\n\n  if (/\\//.test(value)) {\n    value = value.split(/\\s*\\/\\s*/g);\n  } else if (/\\s/.test(value)) {\n    value = value.split(/ +/g);\n  }\n\n  if (isArray(value)) {\n    return {\n      month: value[0],\n      year: value.slice(1).join()\n    };\n  }\n\n  len = value[0] === '0' || value.length > 5 ? 2 : 1;\n\n  if (value[0] === '1') {\n    year = value.substr(1);\n    yearValid = expirationYear(year);\n    if (!yearValid.isPotentiallyValid) {\n      len = 2;\n    }\n  }\n\n  month = value.substr(0, len);\n\n  return {\n    month: month,\n    year: value.substr(month.length)\n  };\n}\n\nmodule.exports = parseDate;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,cAAc,GAAGC,OAAO,qBAAqB;AACjD,IAAIC,OAAO,GAAGD,OAAO,CAAC,qBAAqB,CAAC;AAE5C,SAASE,SAAS,CAACC,KAAK,EAAE;EACxB,IAAIC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,SAAS;EAE/B,IAAI,IAAI,CAACC,IAAI,CAACL,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAGA,KAAK,CAACM,KAAK,CAAC,WAAW,CAAC;EAClC,CAAC,MAAM,IAAI,IAAI,CAACD,IAAI,CAACL,KAAK,CAAC,EAAE;IAC3BA,KAAK,GAAGA,KAAK,CAACM,KAAK,CAAC,KAAK,CAAC;EAC5B;EAEA,IAAIR,OAAO,CAACE,KAAK,CAAC,EAAE;IAClB,OAAO;MACLC,KAAK,EAAED,KAAK,CAAC,CAAC,CAAC;MACfG,IAAI,EAAEH,KAAK,CAACO,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;IAC3B,CAAC;EACH;EAEAN,GAAG,GAAGF,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,KAAK,CAACS,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC;EAElD,IAAIT,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACpBG,IAAI,GAAGH,KAAK,CAACU,MAAM,CAAC,CAAC,CAAC;IACtBN,SAAS,GAAGR,cAAc,CAACO,IAAI,CAAC;IAChC,IAAI,CAACC,SAAS,CAACO,kBAAkB,EAAE;MACjCT,GAAG,GAAG,CAAC;IACT;EACF;EAEAD,KAAK,GAAGD,KAAK,CAACU,MAAM,CAAC,CAAC,EAAER,GAAG,CAAC;EAE5B,OAAO;IACLD,KAAK,EAAEA,KAAK;IACZE,IAAI,EAAEH,KAAK,CAACU,MAAM,CAACT,KAAK,CAACQ,MAAM;EACjC,CAAC;AACH;AAEAG,MAAM,CAACC,OAAO,GAAGd,SAAS"},"metadata":{},"sourceType":"script"}