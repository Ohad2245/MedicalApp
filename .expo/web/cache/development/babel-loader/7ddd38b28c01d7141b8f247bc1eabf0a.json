{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Base64 from \"../../utils/Base64\";\n\nvar Blob = function () {\n  function Blob(binaryString) {\n    _classCallCheck(this, Blob);\n\n    this._binaryString = binaryString;\n  }\n\n  _createClass(Blob, [{\n    key: \"isEqual\",\n    value: function isEqual(blob) {\n      if (!(blob instanceof Blob)) {\n        throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n      }\n\n      return this._binaryString === blob._binaryString;\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64() {\n      return Base64.btoa(this._binaryString);\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return new Uint8Array(this._binaryString.split('').map(function (c) {\n        return c.charCodeAt(0);\n      }));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"firestore.Blob(base64: \" + this.toBase64() + \")\";\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(base64) {\n      if (typeof base64 !== 'string' || base64.length < 1) {\n        throw new Error('firestore.Blob.fromBase64String expects a string of at least 1 character in length');\n      }\n\n      return new Blob(Base64.atob(base64));\n    }\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(array) {\n      if (!(array instanceof Uint8Array)) {\n        throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n      }\n\n      return new Blob(Array.prototype.map.call(array, function (char) {\n        return String.fromCharCode(char);\n      }).join(''));\n    }\n  }]);\n\n  return Blob;\n}();\n\nexport { Blob as default };","map":{"version":3,"names":["Base64","Blob","binaryString","_binaryString","blob","Error","btoa","Uint8Array","split","map","c","charCodeAt","toBase64","base64","length","atob","array","Array","prototype","call","char","String","fromCharCode","join"],"sources":["C:/Users/PC/Desktop/All/StoreApp2/my-app/node_modules/react-native-firebase/dist/modules/firestore/Blob.js"],"sourcesContent":["import Base64 from '../../utils/Base64';\nexport default class Blob {\n  constructor(binaryString) {\n    this._binaryString = binaryString;\n  }\n  /**\n   * Creates a new Blob from the given Base64 string\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromBase64String\n   * @param base64 string\n   */\n\n\n  static fromBase64String(base64) {\n    if (typeof base64 !== 'string' || base64.length < 1) {\n      throw new Error('firestore.Blob.fromBase64String expects a string of at least 1 character in length');\n    }\n\n    return new Blob(Base64.atob(base64));\n  }\n  /**\n   * Creates a new Blob from the given Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#.fromUint8Array\n   * @param array Array\n   */\n\n\n  static fromUint8Array(array) {\n    if (!(array instanceof Uint8Array)) {\n      throw new Error('firestore.Blob.fromUint8Array expects an instance of Uint8Array');\n    }\n\n    return new Blob(Array.prototype.map.call(array, char => String.fromCharCode(char)).join(''));\n  }\n  /**\n   * Returns 'true' if this Blob is equal to the provided one.\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#isEqual\n   * @param {*} blob Blob The Blob to compare against. Value must not be null.\n   * @returns boolean 'true' if this Blob is equal to the provided one.\n   */\n\n\n  isEqual(blob) {\n    if (!(blob instanceof Blob)) {\n      throw new Error('firestore.Blob.isEqual expects an instance of Blob');\n    }\n\n    return this._binaryString === blob._binaryString;\n  }\n  /**\n   * Returns the bytes of a Blob as a Base64-encoded string.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toBase64\n   * @returns string The Base64-encoded string created from the Blob object.\n   */\n\n\n  toBase64() {\n    return Base64.btoa(this._binaryString);\n  }\n  /**\n   * Returns the bytes of a Blob in a new Uint8Array.\n   *\n   * @url https://firebase.google.com/docs/reference/js/firebase.firestore.Blob#toUint8Array\n   * @returns non-null Uint8Array The Uint8Array created from the Blob object.\n   */\n\n\n  toUint8Array() {\n    return new Uint8Array(this._binaryString.split('').map(c => c.charCodeAt(0)));\n  }\n  /**\n   * Returns a string representation of this blob instance\n   *\n   * @returns {string}\n   * @memberof Blob\n   */\n\n\n  toString() {\n    return `firestore.Blob(base64: ${this.toBase64()})`;\n  }\n\n}"],"mappings":";;AAAA,OAAOA,MAAP;;IACqBC,I;EACnB,cAAYC,YAAZ,EAA0B;IAAA;;IACxB,KAAKC,aAAL,GAAqBD,YAArB;EACD;;;;WAuCD,iBAAQE,IAAR,EAAc;MACZ,IAAI,EAAEA,IAAI,YAAYH,IAAlB,CAAJ,EAA6B;QAC3B,MAAM,IAAII,KAAJ,CAAU,oDAAV,CAAN;MACD;;MAED,OAAO,KAAKF,aAAL,KAAuBC,IAAI,CAACD,aAAnC;IACD;;;WASD,oBAAW;MACT,OAAOH,MAAM,CAACM,IAAP,CAAY,KAAKH,aAAjB,CAAP;IACD;;;WASD,wBAAe;MACb,OAAO,IAAII,UAAJ,CAAe,KAAKJ,aAAL,CAAmBK,KAAnB,CAAyB,EAAzB,EAA6BC,GAA7B,CAAiC,UAAAC,CAAC;QAAA,OAAIA,CAAC,CAACC,UAAF,CAAa,CAAb,CAAJ;MAAA,CAAlC,CAAf,CAAP;IACD;;;WASD,oBAAW;MACT,mCAAiC,KAAKC,QAAL,EAAjC;IACD;;;WArED,0BAAwBC,MAAxB,EAAgC;MAC9B,IAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACC,MAAP,GAAgB,CAAlD,EAAqD;QACnD,MAAM,IAAIT,KAAJ,CAAU,oFAAV,CAAN;MACD;;MAED,OAAO,IAAIJ,IAAJ,CAASD,MAAM,CAACe,IAAP,CAAYF,MAAZ,CAAT,CAAP;IACD;;;WASD,wBAAsBG,KAAtB,EAA6B;MAC3B,IAAI,EAAEA,KAAK,YAAYT,UAAnB,CAAJ,EAAoC;QAClC,MAAM,IAAIF,KAAJ,CAAU,iEAAV,CAAN;MACD;;MAED,OAAO,IAAIJ,IAAJ,CAASgB,KAAK,CAACC,SAAN,CAAgBT,GAAhB,CAAoBU,IAApB,CAAyBH,KAAzB,EAAgC,UAAAI,IAAI;QAAA,OAAIC,MAAM,CAACC,YAAP,CAAoBF,IAApB,CAAJ;MAAA,CAApC,EAAmEG,IAAnE,CAAwE,EAAxE,CAAT,CAAP;IACD;;;;;;SAjCkBtB,I"},"metadata":{},"sourceType":"module"}